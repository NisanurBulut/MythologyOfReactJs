[{"E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\index.js":"1","E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\reportWebVitals.js":"2","E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\App.js":"3","E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\Store.js":"4","E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\reducers\\RootReducer.js":"5","E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\reducers\\MythListReducer.js":"6","E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\actions\\MythActions.js":"7","E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\reducers\\MythItemReducer.js":"8","E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\containers\\MytItemDetail\\MythItemDetail.js":"9","E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\containers\\MythList\\MythList.js":"10","E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\containers\\MythItem\\MythItem.js":"11"},{"size":707,"mtime":1612209918114,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":680,"mtime":1612619741050,"results":"15","hashOfConfig":"13"},{"size":320,"mtime":1612208818035,"results":"16","hashOfConfig":"13"},{"size":276,"mtime":1612610170493,"results":"17","hashOfConfig":"13"},{"size":721,"mtime":1612269349613,"results":"18","hashOfConfig":"13"},{"size":1352,"mtime":1612619741051,"results":"19","hashOfConfig":"13"},{"size":718,"mtime":1612269652199,"results":"20","hashOfConfig":"13"},{"size":1706,"mtime":1612619741052,"results":"21","hashOfConfig":"13"},{"size":2658,"mtime":1612619741056,"results":"22","hashOfConfig":"13"},{"size":903,"mtime":1612619741055,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"2wok03",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},"E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\index.js",[],["53","54"],"E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\reportWebVitals.js",[],"E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\App.js",["55"],"import logo from './logo.svg';\r\nimport styledApp from './App.css';\r\nimport { Switch, Route, Redirect, NavLink } from 'react-router-dom';\r\nimport MythList from './containers/MythList/MythList';\r\nimport MythItemDetail from './containers/MytItemDetail/MythItemDetail';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <nav className={styledApp.header}>\r\n        <NavLink to={\"/\"}><b>Search</b></NavLink>\r\n      </nav>\r\n      <Switch>\r\n        <Route path={'/'} exact component={MythList} />\r\n        <Route path={'/myth/:myth'} exact component={MythItemDetail} />\r\n        <Redirect path={\"/\"}></Redirect>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\Store.js",["56"],"import { createStore, compose, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport RootReducer from './reducers/RootReducer';\r\nconst Store= createStore(RootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\nexport default Store;","E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\reducers\\RootReducer.js",[],"E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\reducers\\MythListReducer.js",[],"E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\actions\\MythActions.js",[],"E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\reducers\\MythItemReducer.js",[],"E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\containers\\MytItemDetail\\MythItemDetail.js",["57"],"import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { GetMyth } from '../../actions/MythActions';\r\nimport styledMythItem from '../MytItemDetail/MythItemDetail.css';\r\nimport styledApp from '../../App.css';\r\nimport _ from 'lodash';\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst MythItemDetail = (props) => {\r\n  const mythItemName = props.match.params.myth;\r\n  const dispathch = useDispatch();\r\n  const mythItemState = useSelector((state) => state.MythItem);\r\n\r\n  React.useEffect(() => {\r\n    dispathch(GetMyth(mythItemName));\r\n  }, []);\r\n\r\n  const showData = () => {\r\n    if (! _.isEmpty(mythItemState.data[mythItemName])) {\r\n      const mythItemData=mythItemState.data[mythItemName][0];\r\n\r\n      return(\r\n        <div className={styledMythItem.mythWrapper}>\r\n          <div className={styledMythItem.mythItemHeader}>\r\n           <h1>{mythItemName}</h1>\r\n           <hr/>\r\n          </div>\r\n          <div className={styledMythItem.item}>\r\n            <img src={mythItemData.imagePath} alt={mythItemData.name}/>\r\n            <p>{mythItemData.description}</p>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (mythItemState.loading) {\r\n      return (  <Loader\r\n        className={styledMythItem.listWrapper}\r\n          type=\"Puff\"\r\n          color=\"#00BFFF\"\r\n          height={100}\r\n          width={100}\r\n        />)\r\n    }\r\n\r\n    if (mythItemState.errorMessage !== \"\") {\r\n      return <p className={styledApp.errorMessage}>{mythItemState.errorMessage}</p>\r\n    }\r\n\r\n    return <p className={styledApp.errorMessage}>error getting myth item</p>\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {showData()}\r\n    </div>\r\n  );\r\n};\r\nexport default MythItemDetail;\r\n","E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\containers\\MythList\\MythList.js",["58"],"import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport _ from 'lodash';\r\nimport { GetMythList } from '../../actions/MythActions';\r\nimport { Link } from 'react-router-dom';\r\nimport ReactPaginate from 'react-paginate';\r\nimport styledMythList from '../MythList/MythList.modules.css';\r\nimport appStyled from '../../App.css';\r\nimport MythItem from '../MythItem/MythItem';\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst MythList = (props) => {\r\n  const [search, setSearch] = useState('');\r\n  const dispatch = useDispatch();\r\n  const mythList = useSelector((state) => state.MythList);\r\n\r\n  React.useEffect(() => {\r\n    fetchData(1,search);\r\n  }, [search]);\r\n\r\n  const fetchData = (page = 1) => {\r\n    dispatch(GetMythList(page,search.toLowerCase()));\r\n  };\r\n\r\n  const showData = () => {\r\n    if (!_.isEmpty(mythList.data)) {\r\n      return (\r\n        <div className={styledMythList.listWrapper}>\r\n          <GridList\r\n            cellHeight={250}\r\n            className={styledMythList.gridList}\r\n            cols={4}\r\n          >\r\n            {mythList.data.map((item) => (\r\n              <GridListTile\r\n                key={item.name}\r\n                cols={1}\r\n                className={styledMythList.mythItem}\r\n              >\r\n                <Link to={`/myth/${item.name}`}>\r\n                  <MythItem name={item.name} imagePath={item.imagePath} />\r\n                </Link>\r\n              </GridListTile>\r\n            ))}\r\n          </GridList>\r\n        </div>\r\n      );\r\n    }\r\n    if (mythList.loading) {\r\n      return (\r\n      <Loader\r\n      className={styledMythList.listWrapper}\r\n        type=\"Puff\"\r\n        color=\"#00BFFF\"\r\n        height={100}\r\n        width={100}\r\n      />)\r\n    }\r\n    if (mythList.errorMessage !== '') {\r\n      return <div className={appStyled.errorMessage}>{mythList.errorMessage}</div>;\r\n    }\r\n    return <p className={appStyled.errorMessage}>unable to data</p>;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={styledMythList.searchWrapper}>\r\n        <input type=\"text\" onChange={(e) => setSearch(e.target.value)} />\r\n      </div>\r\n      {showData()}\r\n      {!_.isEmpty(mythList.data) && (\r\n        <ReactPaginate\r\n          pageCount={(Math.ceil(mythList.count / 8))}\r\n          pageRangeDisplayed={1}\r\n          marginPagesDisplayed={2}\r\n          onPageChange={(data) => fetchData(data.selected + 1)}\r\n          containerClassName={styledMythList.pagination}\r\n        ></ReactPaginate>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MythList;\r\n","E:\\Projelerim\\MythologyOfReactJs\\myth\\src\\containers\\MythItem\\MythItem.js",["59"],"import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport styledMythItem from '../MytItemDetail/MythItemDetail.css';\r\nimport _ from 'lodash';\r\n\r\nconst MythItem = (props) => {\r\n  const showData = () => {\r\n    return (\r\n      <Card className={styledMythItem.root}>\r\n        <CardActionArea>\r\n          <CardMedia\r\n            component=\"img\"\r\n            alt={props.name}\r\n            height=\"150\"\r\n            image={props.imagePath}\r\n            title={props.name}\r\n          />\r\n        </CardActionArea>\r\n        <CardActions className={styledMythItem.footer}>\r\n        {props.name}\r\n        </CardActions>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  return <div>{showData()}</div>;\r\n};\r\nexport default MythItem;\r\n",["60","61"],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":8,"nodeType":"68","messageId":"69","endLine":1,"endColumn":12},{"ruleId":"66","severity":1,"message":"70","line":1,"column":23,"nodeType":"68","messageId":"69","endLine":1,"endColumn":30},{"ruleId":"71","severity":1,"message":"72","line":16,"column":6,"nodeType":"73","endLine":16,"endColumn":8,"suggestions":"74"},{"ruleId":"71","severity":1,"message":"75","line":21,"column":6,"nodeType":"73","endLine":21,"endColumn":14,"suggestions":"76"},{"ruleId":"66","severity":1,"message":"77","line":7,"column":8,"nodeType":"68","messageId":"69","endLine":7,"endColumn":9},{"ruleId":"62","replacedBy":"78"},{"ruleId":"64","replacedBy":"79"},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'compose' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'dispathch' and 'mythItemName'. Either include them or remove the dependency array.","ArrayExpression",["82"],"React Hook React.useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["83"],"'_' is defined but never used.",["80"],["81"],"no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [dispathch, mythItemName]",{"range":"88","text":"89"},"Update the dependencies array to be: [fetchData, search]",{"range":"90","text":"91"},[577,579],"[dispathch, mythItemName]",[808,816],"[fetchData, search]"]